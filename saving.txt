class MultipleImageUpload {

    constructor(baseURL, classOp, resourceIDandName, updateScreenFunction) {
        this.selectedFiles = []
        this.baseURL = baseURL
        this.classOp = classOp
        this.updateScreenFunction = null
        this.key = null
        this.value = null

        if(resourceIDandName && typeof resourceIDandName == 'object'){
            this.key = Object.keys(resourceIDandName)[0]
            this.value = Object.values(resourceIDandName)[0]
        }

        if(updateScreenFunction && typeof updateScreenFunction == 'function'){
            this.updateScreenFunction = updateScreenFunction
        }

    }

    async initialize(){
        const baseHTML = `
            <div id="ctn_image_chooser" style="display:none;">
                <div id="content">

                    <form id="files_form" style="display: none;">
                        <input type='file' name='file[]' id='file' class='form-control' onchange="multImage.listFiles(event)" multiple />
                    </form>

                    <div class="row">
                        <div class="col-md-12" style="text-align: center;">
                            <button type="button" class="btn btn-success" onclick="multImage.pickFiles()">Escolher imagens</button>
                            <button type="button" class="btn btn-primary" onclick="multImage.sendAllFiles()">Enviar todos</button>
                            <button type="button" class="btn btn-danger" onclick="multImage.removeAllFiles()">Cancelar todos</button>                 
                        </div>
                    </div>

                    <hr>

                    <div id="files__picker" class="row" style="padding:1rem;">

                    </div>

                </div>
            </div>
        `
        document.body.insertAdjacentHTML('beforeend', baseHTML)
    }

    openFileChooser(e){
        e.preventDefault()

        window_bs({
            title: 'Escolha as imagens para upload',
            msg: $el('#ctn_image_chooser').html(),
            close_fn: 'Não',
            buttons: {
                'Fechar|secondary': function() { 
                    mdl_window_bs.hide(); 
                }
            }
        });
    }

    pickFiles(){
        const fileInput = document.getElementById('file')
        if(fileInput){
            fileInput.click()
        }
    }
    
    async sendAllFiles(){
        const formData = new FormData()

        if(this.selectedFiles.length <= 0){
            alert_top("Nenhum arquivo para enviar", '', 'E')
            return
        }

        let filesArray = []
        for (let i = 0; i < this.selectedFiles.length; i++) {
            filesArray.push(this.selectedFiles[i])
        }

        filesArray.forEach((file, index) => {
            formData.append('files[]', file, file.name)
        })

        formData.append(this.key, this.value)
        formData.append('method', 'adicionar_imagem_produto_ajax')

        try {
            const response = await fetch(base_host+`${this.baseURL}/${this.classOp}`, {

                method: "POST",
                body: formData,
                headers: {
                    // 'Content-Type': 'application/json' Uncomment if sending JSON data
                }
            }) 

            if(!response.ok) throw new Error(`Ocorreu um erro na sua requisição:\n ${response.status}`)

            const DATA = await response.json()

            if(DATA['resposta'] == 'S') {
                alert_top(DATA['msg'], '', 'S')

                this.removeAllFiles()

                if(this.updateScreenFunction !== null){
                    this.updateScreenFunction(this.value)
                }
            } else {
                alert_top(DATA['msg'], '', 'E')
            }


        } catch(error){
            // alert_top('Ocorreu um erro na sua requisição')
            console.log(error)
        } 

    }

    async sendIndividualFile(indexOfFile, filenameToRemove){

        if(this.selectedFiles.length <= 0){
            alert_top("Nenhum arquivo para enviar", '', 'E')
            return
        }

        const file = this.selectedFiles[indexOfFile]
        const formData = new FormData()

        formData.append('files[]', file, file.name)
        formData.append(this.key, this.value)
        formData.append('method', 'adicionar_imagem_produto_ajax')

        try {
            const response = await fetch(base_host+`${this.baseURL}/${this.classOp}`, {
                method: "POST",
                body: formData,
                headers: {
                    // 'Content-Type': 'application/json' Uncomment if sending JSON data
                }
            }) 

            if(!response.ok) throw new Error(`Ocorreu um erro na sua requisição:\n ${response.status}`)

            const DATA = await response.json()

            if(DATA['resposta'] == 'S') {
                alert_top(DATA['msg'], '', 'S')

                this.removeIndividualFile(filenameToRemove)

                if(this.updateScreenFunction !== null){
                    this.updateScreenFunction(this.value)
                }

            } else {
                alert_top(DATA['msg'], '', 'E')
            }


        } catch(error){
            // alert_top('Ocorreu um erro na sua requisição')
            console.log(error)
        } 

    }

    async removeIndividualFile(filenameToRemove){
    
        let filesArray = []
        for (let i = 0; i < this.selectedFiles.length; i++) {
            filesArray.push(this.selectedFiles[i])
        }

        // Filter out the file by name
        filesArray = filesArray.filter(file => file.name !== filenameToRemove)

        // Rebuild the object
        this.selectedFiles = {}
        filesArray.forEach((file, index) => {
            this.selectedFiles[index] = file
        })
        this.selectedFiles.length = filesArray.length

        // Update the file list display
        this.listFiles({ target: { files: this.selectedFiles } })

        // Optional: Check the updated object
        // console.log(selectedFiles)
    }

    removeAllFiles(){
        const filedListed = document.getElementById('files__picker')
        if(filedListed){
            filedListed.innerHTML = ''
            this.selectedFiles = []
        }
    }

    listFiles(e){
        const MAX_FILENAME_SIZE = 30
        const fileListContainer = document.getElementById('files__picker')

        const files = e.target.files
        this.selectedFiles = files

        if(fileListContainer && files){
            fileListContainer.innerHTML = '';

            for(let i = 0; i < files.length; i++){
                const file = files[i]
                let filename = file.name

                if(filename.length > MAX_FILENAME_SIZE){
                    const filetype = filename.slice(filename.lastIndexOf('.'))

                    const charsToShow = MAX_FILENAME_SIZE - filetype.length - 3 // 3 for the ellipsis
        
                    // Split the string at the midpoint
                    const start = filename.slice(0, Math.ceil(charsToShow / 2))
                    const end = filename.slice(-Math.floor(charsToShow / 2))

                    filename =  `${start}...${end}${filetype}`
                }

                const fileSize = (file.size / 1024).toFixed(2) // size in KB
                const fileSizeDisplay = fileSize > 1024 
                ? (fileSize / 1024).toFixed(2) + ' MB' 
                : fileSize + ' KB'
                        
                if(file.type.startsWith('image/')){
                    const reader = new FileReader()
                    
                    reader.onload = function(e){
                        const imageURL = e.target.result

                        const FILE_HTML = `
                        <div id='files__listed' id='${i}' class='col-12' title='${filename}' style='margin-top:1rem; display: flex; align-items: center; justify-content: space-between; cursor:help;'>
                            <span><img style='width:200px;' src='${imageURL}'/> ${filename ? filename : "Erro: arquivo possivelmente com problemas"} (${fileSizeDisplay})</span>
                            <div>
                                <button type="button" class="btn btn-primary" onclick="multImage.sendIndividualFile('${i}', '${file.name}')"> Enviar</button>         
                                <button type="button" class="btn btn-warning" onclick="multImage.removeIndividualFile('${file.name}')">Cancelar</button>         
                            </div>
                        </div>
                        `

                        fileListContainer.innerHTML += FILE_HTML
                    }

                    reader.readAsDataURL(file)
                } else {
                    const FILE_HTML = `
                        <div id='files__listed' id='${i}' class='col-12' title='${filename}' style='margin-top:1rem; display: flex; align-items: center; justify-content: space-between; cursor:help;'>
                            <span><i style='font-size:40px;' class="bi bi-file-earmark"></i> ${filename ? filename : "Erro: arquivo possivelmente com problemas"} (${fileSizeDisplay})</span>
                            <div>
                                <button type="button" class="btn btn-primary" onclick="multImage.sendIndividualFile('${i}', '${file.name}')"> Enviar</button>         
                                <button type="button" class="btn btn-warning" onclick="multImage.removeIndividualFile('${file.name}')">Cancelar</button>         
                            </div>
                        </div>
                    `

                    fileListContainer.innerHTML += FILE_HTML
                }

            }
        }

    }

}